#!/usr/bin/env python3
import os
import cv2
import numpy as np

# EXAMPLE USAGE: BASE_DIR="../collected_data/8/" ./extract_groundtruth.py

# TODO: crop the image down to just the road, just like sentdex

"""
CLASSES:
[[ 32  32  64]  : drivable area
 [  0   0 255]  : lane-lines
 [  0 255   0]  : other cars
 [255   0 204]  : self-car
 [ 96 128 128]] : non-driveable area
"""

BASE_DIR = os.getenv("BASE_DIR")
if BASE_DIR == None:
  print("Specify BASE_DIR")
  exit(1)
#BASE_DIR = "../collected_data/10/"
img_dir = BASE_DIR + "segnet_out/imgs/"
mask_dir = BASE_DIR + "segnet_out/masks/"

out_dir = BASE_DIR + "autogenerated_groundtruth/"
if not os.path.exists(out_dir):
  os.mkdir(out_dir)

RGBforLabel = { 1:(0,0,255), 2:(0,255,255) }
ROAD_EDGE_BGR = [0, 0, 255]

# extracts only road (driveable area) label from segmented img
def get_road(mask_img):
  road_img = []
  for i in range(len(mask_img)):
    tmp = []
    for j in range(len(mask_img[i])):
      if np.array_equal(mask_img[i][j], np.array([32, 32, 64])):
        tmp.append(0)
      else:
        tmp.append(255)
    road_img.append(tmp)
  
  road_img = np.array(road_img, dtype=np.uint8)
  return road_img

def extract_boundaries(origin_img, mask_img):
  """
  _, contours, _ = cv2.findContours(mask_img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

  for i, c in enumerate(contours):
    mask = np.zeros(mask_img.shape, np.uint8)
    cv2.drawContours(mask, [c], -1, 255, -1)
    mean, _, _, _ = cv2.mean(mask_img, mask=mask)
    label = 2 if mean > 1.0 else 1
    colour = RGBforLabel.get(label)

    cv2.drawContours(origin_img, [c], -1, colour, 1)
    return origin_img
  """
  edges = cv2.Canny(mask_img, 100, 200)
  return edges

def overlay_road_edges(img, edges):
  edges = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
  for i in range(len(edges)):
    for j in range(len(edges[i])):
      if np.array_equal(edges[i][j], np.array([255, 255, 255])):
        edges[i][j] = np.array(ROAD_EDGE_BGR)

  ret = cv2.addWeighted(img, 0.5, edges, 0.5, 0.0)
  return ret

def overlay_segmentation(img, mask):
  return cv2.addWeighted(img, 0.5, mask, 0.5, 0.0)


if __name__ == "__main__":
  classes = np.load("data/classes.npy")
  print("[*] Classes Found:", classes.shape)
  print(classes)

  for png in os.listdir(img_dir):
    img_path = img_dir + png
    mask_path = mask_dir + png

    print("Image:", png)

    img = cv2.imread(img_path)
    mask = cv2.imread(mask_path)

    road_mask = get_road(mask)
    edges_img = extract_boundaries(img, road_mask)
    overlay_img = overlay_road_edges(img, edges_img)
    overlay_seg = overlay_segmentation(img, mask)

    #cv2.imwrite(out_dir, overlay_img)  # TODO: extract actual road edges before writing any data

    cv2.imshow("road edges", overlay_img)
    cv2.imshow("overlay segmentation", overlay_seg)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
